1.	Write a C++ program for unary minus (-) operator overloading
2.	#include <iostream>
3.	using namespace std;
4.	
5.	class NUM
6.	{
7.	private:
8.	    int n;
9.	
10.	public:
11.	    // function to get number
12.	    void getNum(int x)
13.	    {
14.	        n = x;
15.	    }
16.	    // function to display number
17.	    void dispNum(void)
18.	    {
19.	        cout << "value of n is: " << n;
20.	    }
21.	    // unary - operator overloading
22.	    void operator-(void)
23.	    {
24.	        n = -n;
25.	    }
26.	};
27.	
28.	int main()
29.	{
30.	    NUM num;
31.	    num.getNum(10);
32.	    -num;
33.	    num.dispNum();
34.	    cout << endl;
35.	    return 0;
36.	}


2. Write a C++ program for unary increment (++) and decrement (--) operator overloading.

#include <iostream>
using namespace std;

class NUM
{
private:
    int n;

public:
    // function to get number
    void getNum(int x)
    {
        n = x;
    }
    // function to display number
    void dispNum(void)
    {
        cout << "value of n is: " << n;
    }
    // unary ++ operator overloading
    void operator++(void)
    {
        n = ++n;
    }
    // unary -- operator overloading
    void operator--(void)
    {
        n = --n;
    }
};

int main()
{
    NUM num;
    num.getNum(10);

    ++num;
    cout << "After increment - ";
    num.dispNum();
    cout << endl;

    --num;
    cout << "After decrement - ";
    num.dispNum();
    cout << endl;

    return 0;
}


3. Write a C++ program for unary logical NOT (!) operator overloading

#include <iostream>
using namespace std;

class NUM
{
private:
    int n;

public:
    // function to get number
    void getNum(int x)
    {
        n = x;
    }
    // function to display number
    void dispNum(void)
    {
        cout << "value of n is: " << n;
    }
    // unary ! operator overloading
    void operator!(void)
    {
        n = !n;
    }
};

int main()
{
    NUM num;
    num.getNum(10);
    cout << "Before calling Operator Overloading:";
    num.dispNum();
    cout << endl;

    !num;
    cout << "After  calling Operator Overloading:";
    num.dispNum();
    cout << endl;

    return 0;
}
